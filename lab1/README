CS 179: GPU Computing
Lab 1: Introduction to CUDA
Name:

================================================================================
Question 1: Common Errors (20 points)
================================================================================

--------------------------------------------------------------------------------
1.1
--------------------------------------------------------------------------------
Issue: No library for printf, the memory location to which *a points was not
		initialized.

Fix:
#include <cstdio>
#include <cstdlib>

Use malloc/calloc to create a memory location for a.
int *a = (int *) calloc(1, sizeof(int));
a* = 3;

--------------------------------------------------------------------------------
1.2
--------------------------------------------------------------------------------
Issue:
b not initialized as an integer pointer.


Fix:
intialize a, b with the statement:
int *a, *b;

--------------------------------------------------------------------------------
1.3
--------------------------------------------------------------------------------
Issue: Not enough memory allocated for the array. Size of integer is 4 bytes (on)
my machine. Only allocated enough space for 1/4 of the needed array.

Fix: allocate 1000 integers with the following code:
int i, *a = (int *) malloc(1000 * sizeof(int));

--------------------------------------------------------------------------------
1.4
--------------------------------------------------------------------------------
Issue: Allocated space for 3 pointers to arrays of integers, but did not allocate
space for the arrays themselves.

Fix: 
Allocate space for the 1x100 arrays with:
for (int i = 0; i < 3; i++){
    *(a+i) = (int *) malloc(10 * sizeof(int));
}

--------------------------------------------------------------------------------
1.5
--------------------------------------------------------------------------------
Issue: As is, the if statement is checking if a was properly allocated. To check
if the value pointed to by a is 0, we need to dereference a.

Fix:
Dereference a to check the value of a.
if(!*a){...}

================================================================================
Question 2: Parallelization (30 points)
================================================================================

--------------------------------------------------------------------------------
2.1  The first one will have the easiest evaluation on the GPU. This is because
the outputs (y[n]) are independant of the inputs (x[n]). In the second one, the
outputs are dependant on other outputs, making it difficult to parallelize.
--------------------------------------------------------------------------------

--------------------------------------------------------------------------------
2.2  If c is close to 1, then 1-c is close to 0. Therefore if we expand the EMA
equation so that instead of y[n-1] we give the relation as a fucntion of x[n-1],
x[n-2] and so on, we will find that the coefficients for these smaller terms are
exponentially small. That is

y[n] = c*x[n] + e*c*x[n-1] + e^2*c*x[n-2]...etc.

where e = (1-c)~0

Therefore we find a value of e for which e^k << 1 or for which e^k is much smaller
than the acceptable error and we truncate the series at that point. This leaves
us with a series which is not dependant on the prior outputs but is dependant on
the inputs. In such an approximation, the solution is parallelizable for the same
reasons given in 2.1
--------------------------------------------------------------------------------

================================================================================
Question 3: Small-Kernel Convolution (50 points)
================================================================================
